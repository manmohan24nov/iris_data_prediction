# MLP with automatic validation set
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer, log_loss
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline
import numpy as np
import matplotlib.pyplot as plt
import import_data

import pandas as pd
import seaborn as sns

raw_data = import_data.main()
# raw_data['class'] = raw_data['class'].map({'Iris-setosa': 1, 'Iris-versicolor' : 2, 'Iris-virginica' : 3})
new_data = raw_data.values
print(new_data[:4])
X = new_data[:, 0:4].astype(float)
Y = new_data[:, 4]

print(X[:4])
print(Y)

# Set Seed
seed = 7
np.random.seed(seed)

# Label encode Class (Species)
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
# One Hot Encode
y_dummy = np_utils.to_categorical(encoded_Y)

# Deep Learnig Function
def deepml_model(optimizer):
    # Model Creation
    deepml = Sequential()
    deepml.add(Dense(8, input_dim=4, activation='relu'))
    deepml.add(Dense(3, activation='softmax'))
    # Model Compilation
    deepml.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])
    return deepml

estimate = KerasClassifier(build_fn=deepml_model)
# k_fold = KFold(n_splits=10, shuffle=True, random_state=seed)
# results = cross_val_score(estimate, X, Y, cv=k_fold)
# print("Model: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

parameters = {'batch_size': [5,10,15,20,25],
              'epochs': [100, 500],
              'optimizer': ['adam', 'rmsprop']}
grid_search = GridSearchCV(estimator = estimate,
                           param_grid = parameters,
                           scoring = make_scorer(log_loss, needs_proba=True, labels=y_dummy),
                           cv = 3)
grid_search = grid_search.fit(X,y_dummy)
best_parameters = grid_search.best_params_
best_accuracy = grid_search.best_score_
print(best_accuracy,best_parameters)
